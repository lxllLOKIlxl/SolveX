import streamlit as st
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="SolveX - –ß–∏—Å–µ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏", layout="centered")

# üìå –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–º—ñ–Ω–Ω—É x
x = sp.Symbol('x')

# üîπ –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
st.markdown("""
    <style>
    .block-container { padding: 20px; }
    .stTextInput, .stNumberInput, .stSelectbox { font-size: 18px; padding: 5px; }
    .stButton>button { font-size: 20px; background-color: #007BFF; color: white; border-radius: 5px; }
    </style>
""", unsafe_allow_html=True)

# üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üî¢ SolveX ‚Äì –†–æ–∑–≤‚Äô—è–∑—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è–Ω—å —á–∏—Å–µ–ª—å–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
st.subheader("‚ö° –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥!")

# üìå –í–≤–µ–¥–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è–Ω–Ω—è
equation_input = st.text_input("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x**3 - x - 2):")

# üìå –í–∏–±—ñ—Ä –º–µ—Ç–æ–¥—É
method = st.selectbox("üîç –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥:", ["–ë—ñ—Å–µ–∫—Ü—ñ—è", "–ù—å—é—Ç–æ–Ω–∞", "–•–æ—Ä–¥"])

# üìå –ú–µ–∂—ñ —Ç–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å
a = st.number_input("üîπ –õ—ñ–≤–∞ –º–µ–∂–∞ (a):", value=-2.0)
b = st.number_input("üîπ –ü—Ä–∞–≤–∞ –º–µ–∂–∞ (b):", value=2.0)
tol = st.slider("üéØ –¢–æ—á–Ω—ñ—Å—Ç—å (Œµ):", min_value=0.0001, max_value=0.01, step=0.0001, value=0.001)

# üìå –ö–Ω–æ–ø–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
if st.button("üöÄ –û–±—á–∏—Å–ª–∏—Ç–∏ –∫–æ—Ä—ñ–Ω—å"):
    if equation_input:
        equation = sp.sympify(equation_input)
        func = sp.lambdify(x, equation)

        # üîπ –ú–µ—Ç–æ–¥ –±—ñ—Å–µ–∫—Ü—ñ—ó
        def bisection_method(func, a, b, tol):
            if func(a) * func(b) >= 0:
                return None
            while (b - a) / 2 > tol:
                c = (a + b) / 2
                if func(c) == 0:
                    return c
                elif func(a) * func(c) < 0:
                    b = c
                else:
                    a = c
            return (a + b) / 2

        # üîπ –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞
        def newton_method(func, x0, tol):
            df = sp.diff(equation, x)
            df_func = sp.lambdify(x, df)
            x_curr = x0
            for _ in range(100):
                x_next = x_curr - func(x_curr) / df_func(x_curr)
                if abs(x_next - x_curr) < tol:
                    return x_next
                x_curr = x_next
            return None

        # üîπ –ú–µ—Ç–æ–¥ —Ö–æ—Ä–¥
        def secant_method(func, a, b, tol):
            x0, x1 = a, b
            for _ in range(100):
                x_next = x1 - func(x1) * (x1 - x0) / (func(x1) - func(x0))
                if abs(x_next - x1) < tol:
                    return x_next
                x0, x1 = x1, x_next
            return None

        # üìå –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–µ–Ω—è
        root = None
        if method == "–ë—ñ—Å–µ–∫—Ü—ñ—è":
            root = bisection_method(func, a, b, tol)
        elif method == "–ù—å—é—Ç–æ–Ω–∞":
            root = newton_method(func, (a + b) / 2, tol)
        elif method == "–•–æ—Ä–¥":
            root = secant_method(func, a, b, tol)

        # üìå –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
        if root is not None:
            st.success(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∏–π –∫–æ—Ä—ñ–Ω—å: {root:.6f}")

            fig, ax = plt.subplots(figsize=(6, 4))
            X = np.linspace(a - 1, b + 1, 100)
            Y = func(X)
            ax.plot(X, Y, label="–§—É–Ω–∫—Ü—ñ—è", color="blue")
            ax.axhline(0, color="black", linewidth=1)
            ax.scatter(root, 0, color="red", marker="o", label="–ö–æ—Ä—ñ–Ω—å", s=100)
            ax.legend()
            ax.set_title("üìä –ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó")
            st.pyplot(fig)
        else:
            st.error("‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä—ñ–Ω—å –∞–±–æ –∑–∞–¥–∞–Ω—ñ –º–µ–∂—ñ –Ω–µ–≤—ñ—Ä–Ω—ñ.")
